Step 1: Create a file called sig.sh
	
	touch sig.sh

Step 2: Edit the file

	vim sig.sh

Step 3: Input the shell script for the given problem statement

	validate_input() {
  	 	local input=$1
   		shift
		local valid_options=("$@")

    		for option in "${valid_options[@]}"; do
       	 		if [[ "$input" == "$option" ]]; then
            			return 0
        		fi
    		done
    		return 1
	}

# This is the function for validation of inputs


Step 4: Take the input for component name

	while true; do
	    read -rp "Enter Component Name [INGESTOR/JOINER/WRANGLER/VALIDATOR]: " component
	    if validate_input "$component" "INGESTOR" "JOINER" "WRANGLER" "VALIDATOR"; then
	        break
  	  else
       	        echo "Invalid component. Try again."
   	    fi
	done

# Here it will validate only the valid input like [INGESTOR/JOINER/WRANGLER/VALIDATOR].
# if the user enters other than this, it displays "Invalid input. Try again".
# The loop will continue until user inputs valid option.

Step 5: Take the input for Scale.

	while true; do
    	   read -rp "Enter Scale [MID/HIGH/LOW]: " scale
    	   if validate_input "$scale" "MID" "HIGH" "LOW"; then
              break
           else
              echo "Invalid scale. Try again."
           fi
	done

Step 6: Take the input for view

	while true; do
    	   read -rp "Enter View [Auction/Bid]: " view
           if validate_input "$view" "Auction" "Bid"; then
              break
           else
              echo "Invalid view. Try again."
            fi
	done

Step 7: Take the input for count(0-9).

	while true; do
    	   read -rp "Enter Count [single digit 0-9]: " count
        if [[ "$count" =~ ^[0-9]$ ]]; then
           break
        else
           echo "Invalid count. Must be a single digit number."
        fi
        done

Step 8: Determine view string name

	if [[ "$view" == "Auction" ]]; then
  	   view_str="vdopiasample"
        else
           view_str="vdopiasample-bid"
        fi

#  If the view is 'Auction' then make it as 'vdopiasample'
#  If the view is 'Bid' then make it as 'vdopiasample-bid'
 
Step 9: Create a new line

        new_line="$view_string ; $scale ; $component ; ETL ; vdopia-etl=$count"

Step 10: Check if sig.conf exists

        if [ ! -f "sig.conf" ]; then
            echo "Creating new sig.conf file"
            echo "$new_line" > sig.conf
            echo "Configuration added successfully!"
            exit 0
        fi

# It will check whether sig.conf file is there or not.
# If the file is not there it will create the file.

Step 11: Check whether the component exists in the file or not.

        if grep -q " $component " "sig.conf"; then
            # Replace existing line
            sed -i "s/.*; $component ;.*/$new_line/" sig.conf
            echo "Updated configuration for $component in sig.conf"
        else
            # Add new line
            echo "$new_line" >> sig.conf
            echo "Added new configuration for $component to sig.conf"
        fi

        echo "Configuration set to: $new_line"

# It will check the component existence.
# If it exists it will change the other values, else it will create a new line.

Step 12: Give the exectable permission

	 chmod +x sig.sh

Step 13: Test the shell script by running it

	 ./sig.sh

Step 14: Following would be the output

 	Enter Component Name [INGESTOR/JOINER/WRANGLER/VALIDATOR]: INGESTOR
        Enter Scale [MID/HIGH/LOW]: MID
        Enter View [Auction/Bid]: Auction
        Enter Count [single digit 0-9]: 5
        Added new configuration for INGESTOR to sig.conf

        sigmoid@sigmoid-ThinkPad-T470:~$ cat sig.conf
        vdopiasample; MID; INGESTOR; ETL; vdopia-etl=5


